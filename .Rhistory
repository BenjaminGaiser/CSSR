$ sudo apt-get install gdebi-core
$ wget https://download2.rstudio.org/rstudio-server-0.99.903-amd64.deb
$ sudo gdebi rstudio-server-0.99.903-amd64.deb
install.packages('ggplot2')
library(ggplot2)
library(ggplot2)
ggplot(mtcars, aes(hp, mpg)) + geom_point()
ls()
install.packages(c("brew", "countrycode", "devtools", "dplyr",
"ggplot2", "googleVis",
"knitr", "MCMCpack",
"repmis", "RCurl",
"rmarkdown", "texreg",
"tidyr", "WDI",
"xtable", "Zelig"))
search()
?cars
head(cars)
NumericVect
cars
mean(x = speed)
mean(cars)
mean(speed)
ls
ls()
history
library(ggplot2)
library(ggplot2)
2 + 2
number <- 10
1/0
1/0
?inf
5*43924638857
5*4
getwd
list.files
list.files()
getwd
getwd()
names()
getwd
getwd()
getwd()
data()
numeric_vector <- c(1,2,3,4,5)
character_vector <- c(a,b,c,d,e)
character_vector <- c(a,b,c,d,e)
character_vector <- c(a,b,c,d,e)
character_vector <- c(a, b, c, d, e)
character_vector <- c(a,b,c,d,e)
character_vector <- c(a,b,c,d,e)
character_vector <- c('a','b','c','d','e')
logical_vector <- c(TRUE, TRUE, TRUE, TRUE, TRUE)
factor_vector <- as.factor(c('a','b','c','d','e'))
str(character_vector)
str(factor_vector)
df <- data.frame (numeric_vector, character_vector, logical_vector, factor_vector)
str(df)
data()
data('swiss')
?swiss
df <- data.frame (numeric_vector, character_vector, logical_vector, factor_vector, stringsAsFactors = FALSE)
getwd
getwd()
library(rio)
getwd()
data()
numeric_vector <- c(1,2,3,4,5)
character_vector <- c('a','b','c','d','e')
logical_vector <- c(TRUE, TRUE, TRUE, TRUE, TRUE)
factor_vector <- as.factor(c('a','b','c','d','e'))
str(character_vector)
str(factor_vector)
df <- data.frame (numeric_vector, character_vector, logical_vector, factor_vector,
stringsAsFactors = FALSE)
str(df)
data('swiss')
?swiss
?str
str(factor_vector)
?factor_vector
??factor_vector
?swiss
list.files
list.files
getwd
getwd()
list()
View(df)
View(swiss)
getwd()
list.files()
names(swiss)
names(df)
df$numeric_vector
swiss$Catholic
swiss$Catholic
swiss$Catholic
ls()
list.files(df)
list.files()
?ls()
summary(swiss)
?subset
install.packages("rmarkdown")
install.packages("rmarkdown")
getwd()
library(rmarkdown)
render("1-example.Rmd")
library(rmarkdown)
summary()
str(df)
summary(swiss)
knitr::kable(mtcars)
knitr::kable(swiss)
summary(swiss)
data('swiss')
data('swiss')
data("swiss")
data()
data("swiss")
names(swiss)
df$numeric_vector
ls()
summary(swiss)
knitr::kable(swiss)
knitr::opts_chunk$set(echo = TRUE)
summary(swiss)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: swiss
summary(swiss)
# Chunk 3: swiss
plot(swiss)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: swiss
summary(swiss)
# Chunk 3: swiss
plot(swiss, fertility, education)
plot(swiss, fertility)
?plot
plot(fertility, education)
plot(cars)
plot(cars)
View(swiss)
plot(swiss)
plot(fertility)
fertility <- c(swiss$Fertility)
education <- c(swiss$Education)
plot(education, fertility)
knitr::opts_chunk$set(echo = TRUE)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: swiss
summary(swiss$education, swiss$fertility)
# Chunk 3: swiss
plot(swiss$education, swiss$fertility)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: swiss
summary(swiss$Education, swiss$Fertility)
# Chunk 3: swiss
plot(swiss$Education, swiss$Fertility)
summary(swiss$Fertility)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: swiss
summary(swiss$Fertility)
# Chunk 3: swiss
plot(swiss$Education, swiss$Fertility)
View(swiss)
View(swiss$Fertility)
head(swiss, n=5)
view(swiss)
view(swiss)
getOption()
getOption("max.print")
options(max.print = 100)
getOption("max.print")
?repmis
??repmis
?getOptions
?getOption
options()
summary(swiss$Fertility)
summary(swiss$Education)
describe(swiss$Fertility)
describe(swiss$Education)
?describe
??describe
# Load packages and remove from global environment
packages <- c('repmis', 'knitr', 'rmarkdown', 'Hmisc', 'ggplot2', 'pastecs')
for (p in packages) {
if (p %in% installed.packages()) require(p, character.only=TRUE) # what does that [] mean
else {
install.packages(p)
require(p, character.only=TRUE)
}
}
repmis::LoadandCite(packages, file = 'RpackageCitations.bib')
rm(packages, p)
describe(swiss$Fertility)
describe(swiss$Education)
AlcoholConsumption$WineCat1 <- cut(AlcoholConsumption$wine_servings, seq(0, 370, 100))
summary(AlcoholConsumption$WineCat1)
ggplotRegSwiss <- function(fit){
ggplot(swiss, aes(Fertility, Education)) +
geom_point(aes(colour = "black")) +
scale_colour_discrete(name="whatever goes here") +
stat_smooth(method = "lm", col = "black") +
labs(title = paste("Adj. R2 = ",signif(summary(fit)$adj.r.squared, 3),
"Intercept =" ,signif(fit$coef[[1]],3 ),
"Slope =" ,signif(fit$coef[[2]], 1),
"P =" ,signif(summary(fit)$coef[2,4], 2)))
}
FitOfDataSwiss <- lm(Fertility ~ Education, data = swiss) # What to do here?
ggplotRegSwiss(FitOfDataSwiss)
ggplotRegSwiss <- function(fit){
ggplot(swiss, aes(Fertility, Education)) +
geom_point(aes(colour = "orange")) +
scale_colour_discrete(name="whatever goes here") +
stat_smooth(method = "lm", col = "black") +
labs(title = paste("Adj. R2 = ",signif(summary(fit)$adj.r.squared, 3),
"Intercept =" ,signif(fit$coef[[1]],3 ),
"Slope =" ,signif(fit$coef[[2]], 1),
"P =" ,signif(summary(fit)$coef[2,4], 2)))
}
FitOfDataSwiss <- lm(Fertility ~ Education, data = swiss) # What to do here?
ggplotRegSwiss(FitOfDataSwiss)
wrkdir <- c('C:/Users/Benji/Desktop/Statistics/Git/Repositories/data/alcohol-consumption',
'~/Hertie School/Fall 2016/CollaborativeSocialScienceDataAnalysis/CSSR')
repmis::set_valid_wd(wrkdir)
rm(wrkdir)
# Import data frames
AlcoholConsumption <- read.csv("drinks.csv", header = TRUE, sep = ",",
stringsAsFactors = FALSE, na.strings = c("", "NA"))
# Initial Descriptive Statistics
summary(AlcoholConsumption)
describe(AlcoholConsumption)
# Create heavy wine/spirit drinker categories and use as factor
AlcoholConsumption$WineCat1 <- cut(AlcoholConsumption$wine_servings, seq(0, 370, 100))
summary(AlcoholConsumption$WineCat1)
# one coloured gradient for wine consumption
ggplotRegression <- function(fit){
ggplot(AlcoholConsumption, aes(beer_servings, total_litres_of_pure_alcohol)) +
geom_point(aes(colour = factor(AlcoholConsumption$WineCat1))) +
scale_colour_discrete(name="Wine Servings") +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 3),
"Intercept =",signif(fit$coef[[1]],3 ),
" Slope =",signif(fit$coef[[2]], 1),
" P =",signif(summary(fit)$coef[2,4], 2)))
}
FitOfData <- lm(total_litres_of_pure_alcohol ~ beer_servings, data=AlcoholConsumption)
ggplotRegression(FitOfData)
wrkdir <- c('C:/Users/Benji/Desktop/Statistics/Git/Repositories/data/alcohol-consumption',
'~/Hertie School/Fall 2016/CollaborativeSocialScienceDataAnalysis/CSSR')
repmis::set_valid_wd(wrkdir)
rm(wrkdir)
# Import data frames
swiss <- as.data.frame(swiss)
plot(swiss$Fertility, swiss$Education)
# Initial Descriptive Stats
summary(swiss$Fertility)
summary(swiss$Education)
describe(swiss$Fertility)
describe(swiss$Education)
# Did not create similar factor variable as in 538 data ** Do you mean which.max and grepl?
# I was referring to lines 60-62
# Plot fertility and education -- got it working for you. Following 3 mistakes
# i) you missed a ) at the end of line 79
# ii) you wrote "fit@coef" instead of "fit$coef" in line 77
# iii) when specifying a lm model in line 81, you do not have to use "df$" but only variable names and at the end ", data=df"
ggplotRegSwiss <- function(fit){
ggplot(swiss, aes(Fertility, Education)) +
geom_point(aes(colour = "orange")) +
scale_colour_discrete(name="whatever goes here") +
stat_smooth(method = "lm", col = "black") +
labs(title = paste("Adj. R2 = ",signif(summary(fit)$adj.r.squared, 3),
"Intercept =" ,signif(fit$coef[[1]],3 ),
"Slope =" ,signif(fit$coef[[2]], 1),
"P =" ,signif(summary(fit)$coef[2,4], 2)))
}
FitOfDataSwiss <- lm(Fertility ~ Education, data = swiss) # What to do here?
ggplotRegSwiss(FitOfDataSwiss)
ggplotRegSwiss <- function(fit){
ggplot(swiss, aes(Fertility, Education)) +
geom_point(aes(colour = "")) +
scale_colour_discrete(name="Education and Fertility Rates") +
stat_smooth(method = "lm", col = "black") +
labs(title = paste("Adj. R2 = ",signif(summary(fit)$adj.r.squared, 3),
"Intercept =" ,signif(fit$coef[[1]],3 ),
"Slope =" ,signif(fit$coef[[2]], 1),
"P =" ,signif(summary(fit)$coef[2,4], 2)))
}
FitOfDataSwiss <- lm(Fertility ~ Education, data = swiss) # What to do here?
ggplotRegSwiss(FitOfDataSwiss)
ggplotRegSwiss <- function(fit){
ggplot(swiss, aes(Fertility, Education)) +
geom_point() +
scale_colour_discrete(name="Education and Fertility Rates") +
stat_smooth(method = "lm", col = "black") +
labs(title = paste("Adj. R2 = ",signif(summary(fit)$adj.r.squared, 3),
"Intercept =" ,signif(fit$coef[[1]],3 ),
"Slope =" ,signif(fit$coef[[2]], 1),
"P =" ,signif(summary(fit)$coef[2,4], 2)))
}
FitOfDataSwiss <- lm(Fertility ~ Education, data = swiss) # What to do here?
ggplotRegSwiss(FitOfDataSwiss)
ggplotRegSwiss <- function(fit){
ggplot(swiss, aes(Fertility, Education)) +
geom_point(aes(colour = "")) +
scale_colour_discrete(name="Education and Fertility Rates") +
stat_smooth(method = "lm", col = "black") +
labs(title = paste("Adj. R2 = ",signif(summary(fit)$adj.r.squared, 3),
"Intercept =" ,signif(fit$coef[[1]],3 ),
"Slope =" ,signif(fit$coef[[2]], 1),
"P =" ,signif(summary(fit)$coef[2,4], 2)))
}
FitOfDataSwiss <- lm(Fertility ~ Education, data = swiss) # What to do here?
ggplotRegSwiss(FitOfDataSwiss)
ggplotRegSwiss <- function(fit){
ggplot(swiss, aes(Fertility, Education)) +
geom_point(aes(colour = "")) +
scale_colour_discrete(name="") +
stat_smooth(method = "lm", col = "black") +
labs(title = paste("Adj. R2 = ",signif(summary(fit)$adj.r.squared, 3),
"Intercept =" ,signif(fit$coef[[1]],3 ),
"Slope =" ,signif(fit$coef[[2]], 1),
"P =" ,signif(summary(fit)$coef[2,4], 2)))
}
FitOfDataSwiss <- lm(Fertility ~ Education, data = swiss) # What to do here?
ggplotRegSwiss(FitOfDataSwiss)
ggplotRegSwiss <- function(fit){
ggplot(swiss, aes(Fertility, Education)) +
geom_point(aes(colour = "")) +
+
stat_smooth(method = "lm", col = "black") +
labs(title = paste("Adj. R2 = ",signif(summary(fit)$adj.r.squared, 3),
"Intercept =" ,signif(fit$coef[[1]],3 ),
"Slope =" ,signif(fit$coef[[2]], 1),
"P =" ,signif(summary(fit)$coef[2,4], 2)))
}
FitOfDataSwiss <- lm(Fertility ~ Education, data = swiss) # What to do here?
ggplotRegSwiss(FitOfDataSwiss)
ggplotRegSwiss <- function(fit){
ggplot(swiss, aes(Fertility, Education)) +
geom_point(aes(colour)) +
scale_colour_discrete(name="") +
stat_smooth(method = "lm", col = "black") +
labs(title = paste("Adj. R2 = ",signif(summary(fit)$adj.r.squared, 3),
"Intercept =" ,signif(fit$coef[[1]],3 ),
"Slope =" ,signif(fit$coef[[2]], 1),
"P =" ,signif(summary(fit)$coef[2,4], 2)))
}
FitOfDataSwiss <- lm(Fertility ~ Education, data = swiss) # What to do here?
ggplotRegSwiss(FitOfDataSwiss)
ggplotRegSwiss <- function(fit){
ggplot(swiss, aes(Fertility, Education)) +
geom_point(aes(colour = "")) +
scale_colour_discrete(name="") +
stat_smooth(method = "lm", col = "black") +
labs(title = paste("Adj. R2 = ",signif(summary(fit)$adj.r.squared, 3),
"Intercept =" ,signif(fit$coef[[1]],3 ),
"Slope =" ,signif(fit$coef[[2]], 1),
"P =" ,signif(summary(fit)$coef[2,4], 2)))
}
FitOfDataSwiss <- lm(Fertility ~ Education, data = swiss) # What to do here?
ggplotRegSwiss(FitOfDataSwiss)
ggplotRegSwiss <- function(fit){
ggplot(swiss, aes(Fertility, Education)) +
geom_point(aes(colour = "abc")) +
scale_colour_discrete(name="") +
stat_smooth(method = "lm", col = "black") +
labs(title = paste("Adj. R2 = ",signif(summary(fit)$adj.r.squared, 3),
"Intercept =" ,signif(fit$coef[[1]],3 ),
"Slope =" ,signif(fit$coef[[2]], 1),
"P =" ,signif(summary(fit)$coef[2,4], 2)))
}
FitOfDataSwiss <- lm(Fertility ~ Education, data = swiss) # What to do here?
ggplotRegSwiss(FitOfDataSwiss)
?swiss
ggplotRegSwiss <- function(fit){
ggplot(swiss, aes(Fertility, Education)) +
geom_point(aes(colour = "Standardized Fertility Measure and % education beyond primary school")) +
scale_colour_discrete(name="") +
stat_smooth(method = "lm", col = "black") +
labs(title = paste("Adj. R2 = ",signif(summary(fit)$adj.r.squared, 3),
"Intercept =" ,signif(fit$coef[[1]],3 ),
"Slope =" ,signif(fit$coef[[2]], 1),
"P =" ,signif(summary(fit)$coef[2,4], 2)))
}
FitOfDataSwiss <- lm(Fertility ~ Education, data = swiss) # What to do here?
ggplotRegSwiss(FitOfDataSwiss)
ggplotRegSwiss <- function(fit){
ggplot(swiss, aes(Fertility, Education)) +
geom_point(aes(colour = "Fertility and % education beyond primary school")) +
scale_colour_discrete(name="") +
stat_smooth(method = "lm", col = "black") +
labs(title = paste("Adj. R2 = ",signif(summary(fit)$adj.r.squared, 3),
"Intercept =" ,signif(fit$coef[[1]],3 ),
"Slope =" ,signif(fit$coef[[2]], 1),
"P =" ,signif(summary(fit)$coef[2,4], 2)))
}
FitOfDataSwiss <- lm(Fertility ~ Education, data = swiss) # What to do here?
ggplotRegSwiss(FitOfDataSwiss)
qplot(swiss$Fertility, swiss$Education, colour = "orange", xlab = "Fertility",
ylab = "Education")
swiss <- as.data.frame(swiss)
qplot(swiss$Fertility, swiss$Education, colour = "orange", xlab = "Fertility",
ylab = "Education")
qplot(swiss$Fertility, swiss$Education, xlab = "Fertility",
ylab = "Education")
ggplotRegSwiss <- function(fit){
ggplot(swiss, aes(Fertility, Education)) +
geom_point(aes(colour = "Fertility and % education beyond primary school")) +
scale_colour_discrete(name="") +
stat_smooth(method = "lm", col = "black") +
labs(title = paste("Adj. R2 = ",signif(summary(fit)$adj.r.squared, 3),
"Intercept =" ,signif(fit$coef[[1]],3 ),
"Slope =" ,signif(fit$coef[[2]], 1),
"P =" ,signif(summary(fit)$coef[2,4], 2)))
}
FitOfDataSwiss <- lm(Fertility ~ Education, data = swiss) # What to do here?
ggplotRegSwiss(FitOfDataSwiss)
ggplotRegSwiss <- function(fit){
ggplot(swiss, aes(Fertility, Education)) +
geom_point(aes(colour) +
scale_colour_discrete(name="") +
stat_smooth(method = "lm", col = "black") +
labs(title = paste("Adj. R2 = ",signif(summary(fit)$adj.r.squared, 3),
"Intercept =" ,signif(fit$coef[[1]],3 ),
"Slope =" ,signif(fit$coef[[2]], 1),
"P =" ,signif(summary(fit)$coef[2,4], 2)))
}
FitOfDataSwiss <- lm(Fertility ~ Education, data = swiss) # What to do here?
ggplotRegSwiss(FitOfDataSwiss)
ggplotRegSwiss <- function(fit){
ggplot(swiss, aes(Fertility, Education)) +
geom_point() +
scale_colour_discrete(name="") +
stat_smooth(method = "lm", col = "black") +
labs(title = paste("Adj. R2 = ",signif(summary(fit)$adj.r.squared, 3),
"Intercept =" ,signif(fit$coef[[1]],3 ),
"Slope =" ,signif(fit$coef[[2]], 1),
"P =" ,signif(summary(fit)$coef[2,4], 2)))
}
FitOfDataSwiss <- lm(Fertility ~ Education, data = swiss) # What to do here?
ggplotRegSwiss(FitOfDataSwiss)
which.max(swiss$Education)
head(swiss$Education[16,])
head(swiss$Education[45,])
View(swiss)
summarize(swiss$Education)
summary(swiss$Education)
describe(swiss$Education)
list(swiss$Education)
ls(swiss$Education)
head(swiss$Education[,45])
summary(swiss$Education)
var(swiss$Fertility, swiss$Education)
var(swiss$Fertility)
var(swiss$Education)
sd(swiss$Fertility)
sd(swiss$Education)
FertilityEducTable <- table(swiss$Fertility, swiss$Education)
summmary(FertilityEducTable)
list(FertilityEducTable)
FertilityEducTable <- table(swiss$Fertility, swiss$Education)
barplot(FertilityEducTable, main="Swiss Education and Fertility Rates",
xlab="", col=c("darkblue","red"),
legend = rownames(FertilityEducTable))
FertilityEducTable <- df(swiss$Fertility, swiss$Education)
barplot(FertilityEducTable, main="Swiss Education and Fertility Rates",
xlab="", col=c("darkblue","red"),
legend = rownames(FertilityEducTable))
FertilityTable <- table(swiss$Fertility)
barplot(FertilityTable, main="Swiss Fertility Rates",
xlab="", col=c("red"))
EducationTable <- table(swiss$Education)
barplot(EducationTable, main="Swiss Education Rates",
xlab="", col=c("red"))
